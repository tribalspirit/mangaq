{"version":3,"sources":["assets/manga/4.jpg","components/menu/menu.js","components/menu/lang-switcher.js","components/menu/index.js","components/date-indicator/index.js","components/bubble/index.js","views/manga-reader/index.js","views/grammar/index.js","views/help/index.js","views/app.js","serviceWorker.js","index.js"],"names":["module","exports","MenuLinks","className","key","to","LANG_LIST","label","value","LangSwitcher","state","selected","_onClick","val","setState","_renderOptions","options","map","i","onClick","this","React","Component","Menu","DateIndicator","Date","toDateString","getStyle","x","y","width","height","fontSize","position","bottom","left","Bubble","originalCaptions","detailedCaptions","id","captions","split","style","idx","lexem","details","data-tip","_renderLexem","MangaReader","useState","en","jp","data","samplePage","detected","encoding","detect","console","log","src","testImg","alt","bubbles","translatedCaptions","e","toString","Grammar","Help","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f93f1ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/4.cf4ae245.jpg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n/*\r\n    // PREVIOUSLY\r\nconst Menu = () => (\r\n    <div>\r\n        <a key='menu1'>Articles</a>\r\n        <a key='menu2'>Articles2</a>\r\n        <a key='menu3'>Articles3</a>\r\n    </div>\r\n)\r\n\r\n*/\r\n\r\n// \r\nconst MenuLinks = () => ([\r\n    <Link className='link' key='home' to='/'>Home</Link>,\r\n    <Link className='link' key='manga' to='/manga'>Manga</Link>,\r\n    <Link className='link' key='grammar' to='/grammar'>Grammar</Link>,\r\n    <Link className='link' key='help' to='/help'>Help</Link>,\r\n])\r\n\r\nexport default MenuLinks","import React from 'react'\r\n\r\nconst LANG_LIST = [\r\n    {\r\n        label: 'English',\r\n        value: 'en'\r\n    },\r\n    {\r\n        label: 'Chinese',\r\n        value: 'cn'\r\n    },\r\n    {\r\n        label: 'Japanese',\r\n        value: 'jp'\r\n    }\r\n]\r\n\r\n\r\nclass LangSwitcher extends React.Component {\r\n    state = { selected: LANG_LIST[0] }\r\n\r\n    _onClick = val => this.setState({ selected: val })\r\n\r\n    _renderOptions = options => options.map(i => (<li className={i.value} key={i.value} onClick={() => this._onClick(i)}>{i.label}</li>))\r\n\r\n    render() {\r\n        return (\r\n            <li className={this.state.selected.value}><div className='link'>{this.state.selected.label}</div>\r\n                <ul>\r\n                    {this._renderOptions(LANG_LIST)}\r\n                </ul>        \r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LangSwitcher","import React from 'react'\r\nimport MenuLinks from './menu'\r\nimport LangSwitcher from './lang-switcher'\r\n\r\nconst Menu = () => (\r\n    <nav>\r\n    <ul>\r\n        <MenuLinks />\r\n        <LangSwitcher />\r\n    </ul>\r\n</nav>\r\n)\r\n\r\nexport default Menu","const DateIndicator = () => (new Date().toDateString())\r\n\r\nexport default DateIndicator","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nconst getStyle = ({ x, y, width, height, fontSize }) => ({\r\n    position: 'relative',\r\n    bottom: y,\r\n    left: x,\r\n    width,\r\n    height,\r\n    fontSize: `${fontSize}em`\r\n})\r\n\r\nconst _renderLexem = (lexem, idx, details) => (<span key={idx} className='lexem' data-tip={details}>{lexem}</span>)\r\n\r\nconst Bubble = ({ originalCaptions, options, detailedCaptions, id }) => {\r\n    const captions = originalCaptions.split('|')\r\n    return (<div\r\n        key={`bubble-${id}`}\r\n        className='bubble jp-text'\r\n        style={getStyle(options)}>\r\n        {captions.map((i, idx) => _renderLexem(i, idx, detailedCaptions[idx]))}\r\n        <ReactTooltip key={`tooltip-${id}`} className='lexem-tooltip'/>\r\n    </div>\r\n)}\r\n\r\nBubble.propTypes = {\r\n    id: PropTypes.number,\r\n    originalCaptions: PropTypes.string,\r\n    translatedCaptions: PropTypes.string,\r\n    options: PropTypes.object,\r\n    detailedCaptions: PropTypes.array\r\n}\r\n\r\nexport default Bubble","import React, { useState }  from 'react'\r\nimport testImg from '../../assets/manga/4.jpg'\r\nimport samplePage from '../../assets/manga/4.json'\r\nimport Bubble from '../../components/bubble'\r\nimport encoding from 'encoding-japanese'\r\n\r\nconst MangaReader = () => {\r\n    const [captions, setCaptions] = useState({ en: '', jp: '', details: [] });\r\n\r\n    const data = (samplePage)\r\n    var detected = encoding.detect(data)\r\n    console.log(detected)\r\n    \r\n    return (<div className='viewer'>\r\n        <div className='image-container'>\r\n            <img src={testImg} className='manga-page' alt={samplePage.alt}/>\r\n            {data.bubbles.map(({ id, options, originalCaptions, translatedCaptions, detailedCaptions }, idx) => <Bubble \r\n                key={idx}\r\n                id={id}\r\n                originalCaptions={originalCaptions}\r\n                options={options}\r\n                translatedCaptions={translatedCaptions}\r\n                detailedCaptions={detailedCaptions}\r\n            />)}\r\n\r\n        </div>\r\n        <div className='details-container'>\r\n            <p>{captions.jp}</p>\r\n            <p>{captions.en}</p>\r\n            {captions.details.map((e, idx) => (<p key={idx}>{e.toString()}</p>))}\r\n        </div>\r\n    </div>\r\n)}\r\n\r\nexport default MangaReader","import React from 'react'\r\n\r\nconst Grammar = () => (\r\n    <div>\r\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tempus pretium sapien vitae tempus. Donec rutrum mi elit, sit amet pulvinar ex porta vitae. Ut urna lectus, eleifend quis purus sed, aliquet fringilla magna. Quisque vitae turpis eu mauris interdum vehicula aliquam vitae tellus. Cras enim urna, congue eu semper ut, dictum non dui. Vestibulum dictum placerat scelerisque. Praesent elit nunc, pharetra vitae nunc non, dapibus dignissim elit. Morbi laoreet ex nibh, id semper magna vulputate eu. Proin fringilla lacus ac nunc venenatis, nec pulvinar risus aliquam. Aliquam tempor semper sapien, eget eleifend tortor molestie ac. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Pellentesque bibendum dolor non tincidunt accumsan. Quisque sed bibendum lectus. Curabitur luctus tincidunt elementum.</p>\r\n\r\n    </div>\r\n)\r\n\r\nexport default Grammar","import React from 'react'\r\n\r\nconst Help = () => (\r\n    <div>\r\n        <p>Quisque nibh mauris, finibus vel vulputate vel, condimentum sit amet libero. Nulla gravida nisl erat, sed malesuada neque auctor at. Sed mauris metus, faucibus ut pretium eu, congue ut leo. Praesent in porta lacus. Vestibulum volutpat, ipsum dapibus tincidunt vulputate, nibh lacus iaculis odio, in tempus tellus nibh a lorem. Pellentesque tristique non enim sed scelerisque. Pellentesque ac eros ac orci efficitur molestie. Donec eget est lobortis arcu tempor suscipit. Vestibulum vitae sem ac ante sagittis laoreet rhoncus sed ex. Nam eget porta leo. Maecenas dui eros, imperdiet eget nibh ac, facilisis placerat odio.</p>\r\n\r\n        <p>Praesent ornare est tortor, condimentum pharetra ante accumsan ut. Sed porttitor nulla sit amet risus scelerisque pretium. Aliquam quis odio lacinia, lobortis dui ac, auctor est. Donec elementum dignissim pretium. Suspendisse euismod feugiat elit vitae molestie. Duis semper, est in ornare pellentesque, neque enim convallis risus, et sagittis odio risus quis turpis. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>\r\n\r\n    </div>\r\n)\r\n\r\nexport default Help","import React from 'react'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport { Menu, DateIndicator } from '../components'\r\nimport MangaReader from './manga-reader'\r\nimport Grammar from './grammar'\r\nimport Help from './help'\r\nimport '../assets/bootstrap/css/app.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='app'>\r\n      <BrowserRouter basename=\"/mangaq/\">\r\n\r\n        <Route path='/' component={() => (\r\n          <header className='app-header'>\r\n            <Menu />\r\n          </header>\r\n        )} />\r\n        <Route path='/manga' component={MangaReader} />\r\n        <Route path='/grammar' component={Grammar} />\r\n        <Route path='/help' component={Help} />\r\n      </BrowserRouter>\r\n\r\n      <footer className='app-footer'>\r\n        <span>This page was visited on:&nbsp;</span><DateIndicator />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './views/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}